'use client'

import { onAuthStateChanged } from "firebase/auth";
import { Geist, Geist_Mono } from "next/font/google";
import Head from "next/head";
import { usePathname, useRouter } from "next/navigation";
import { createContext, useEffect, useState } from "react";
import { auth } from "./firebase/config";
import "./globals.css";

// AuthContext Type
type AuthContextType = {
  userId: string | null
  setUserId: (user: string) => void
}

// Authentication context
export const AuthContext = createContext<AuthContextType>({userId: null, setUserId: (userId: string) => {}})

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Router
  const router = useRouter()
  const pathName = usePathname()

  // Authentication state
  const [userId, setUserId] = useState<string | null>(null)

  // onAuthStateChanged useEffect
  useEffect(() => {
    const subscriber = onAuthStateChanged(auth,
      (user) => {
        if (!user) {
          console.log('Redirecting to login...')
          setUserId(null)
          router.push('/')
        }  else if (user && pathName === '/') {
          setUserId(user.uid)
          router.push('./dashboard')
        }
    })

    return () => subscriber()
    
  }, [])

  return (
    <AuthContext.Provider value={{userId: userId, setUserId: setUserId}}>
      <html lang="en">
        <Head><title>Ecollector Admin Dashboard</title></Head>
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
          {children}
        </body>
      </html>
    </AuthContext.Provider>
  );
}
